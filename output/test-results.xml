<?xml version="1.0" encoding="utf-8"?><testsuites name="pytest tests"><testsuite name="pytest" errors="0" failures="1" skipped="0" tests="6" time="2.664" timestamp="2025-06-05T10:56:58.570076+03:00" hostname="CCNY_Apple_DEP_KWWLWNJQH3"><testcase classname="tests.test_channel_videos" name="test_get_channel_video_info" time="0.005"><failure message="AssertionError: expected call not found.&#10;Expected: extract_info('https://youtube.com/c/TestChannel', download=False)&#10;  Actual: extract_info('https://youtube.com/channel/TestChannel', download=False)&#10;&#10;pytest introspection follows:&#10;&#10;Args:&#10;assert ('https://you...TestChannel',) == ('https://you...TestChannel',)&#10;  &#10;  At index 0 diff: 'https://youtube.com/channel/TestChannel' != 'https://youtube.com/c/TestChannel'&#10;  &#10;  Full diff:&#10;    (&#10;  -     'https://youtube.com/c/TestChannel',&#10;  +     'https://youtube.com/channel/TestChannel',&#10;  ?                           ++++++&#10;    )">self = &lt;Mock name='YoutubeDL().__enter__().extract_info' id='4350490480'&gt;
args = ('https://youtube.com/c/TestChannel',), kwargs = {'download': False}
expected = call('https://youtube.com/c/TestChannel', download=False)
actual = call('https://youtube.com/channel/TestChannel', download=False)
_error_message = &lt;function NonCallableMock.assert_called_with.&lt;locals&gt;._error_message at 0x126b184a0&gt;
cause = None

    def assert_called_with(self, /, *args, **kwargs):
        """assert that the last call was made with the specified arguments.
    
        Raises an AssertionError if the args and keyword args passed in are
        different to the last call to the mock."""
        if self.call_args is None:
            expected = self._format_mock_call_signature(args, kwargs)
            actual = 'not called.'
            error_message = ('expected call not found.\nExpected: %s\n  Actual: %s'
                    % (expected, actual))
            raise AssertionError(error_message)
    
        def _error_message():
            msg = self._format_mock_failure_message(args, kwargs)
            return msg
        expected = self._call_matcher(_Call((args, kwargs), two=True))
        actual = self._call_matcher(self.call_args)
        if actual != expected:
            cause = expected if isinstance(expected, Exception) else None
&gt;           raise AssertionError(_error_message()) from cause
E           AssertionError: expected call not found.
E           Expected: extract_info('https://youtube.com/c/TestChannel', download=False)
E             Actual: extract_info('https://youtube.com/channel/TestChannel', download=False)

../../../miniconda3/lib/python3.12/unittest/mock.py:949: AssertionError

During handling of the above exception, another exception occurred:

mock_ytdl = &lt;MagicMock name='YoutubeDL' id='4368024304'&gt;
sample_channel_info = {'entries': [{'_type': 'video', 'automatic_captions': {'en': [{'ext': 'vtt'}]}, 'description': 'Test Description', 'du...ideo', 'automatic_captions': {}, 'description': 'Test Description 2', 'duration': 1800, ...}], 'title': 'Test Channel'}

    def test_get_channel_video_info(mock_ytdl, sample_channel_info):
        """Test getting channel video information."""
        # Setup mock
        mock_instance = Mock()
        mock_ytdl.return_value.__enter__.return_value = mock_instance
        mock_instance.extract_info.return_value = sample_channel_info
    
        # Test with different URL formats
        test_urls = [
            "https://youtube.com/channel/UC123",
            "https://youtube.com/c/TestChannel",
            "https://youtube.com/@TestChannel",
        ]
    
        for url in test_urls:
            result = get_channel_video_info(url)
            assert result == sample_channel_info
&gt;           mock_instance.extract_info.assert_called_with(url, download=False)
E           AssertionError: expected call not found.
E           Expected: extract_info('https://youtube.com/c/TestChannel', download=False)
E             Actual: extract_info('https://youtube.com/channel/TestChannel', download=False)
E           
E           pytest introspection follows:
E           
E           Args:
E           assert ('https://you...TestChannel',) == ('https://you...TestChannel',)
E             
E             At index 0 diff: 'https://youtube.com/channel/TestChannel' != 'https://youtube.com/c/TestChannel'
E             
E             Full diff:
E               (
E             -     'https://youtube.com/c/TestChannel',
E             +     'https://youtube.com/channel/TestChannel',
E             ?                           ++++++
E               )

tests/test_channel_videos.py:90: AssertionError</failure></testcase><testcase classname="tests.test_channel_videos" name="test_get_channel_video_info_error" time="0.001" /><testcase classname="tests.test_channel_videos" name="test_get_video_details" time="0.001" /><testcase classname="tests.test_channel_videos" name="test_parse_upload_date" time="0.002" /><testcase classname="tests.test_channel_videos" name="test_get_unique_csv_filename" time="0.002" /><testcase classname="tests.test_channel_videos" name="test_youtube_dl_output_format" time="0.001" /></testsuite></testsuites>